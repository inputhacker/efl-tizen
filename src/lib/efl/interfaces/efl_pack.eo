interface Efl.Pack (Efl.Container)
{
   [[API common to all UI container objects.]]
   methods
   {
      pack_clear {
         [[Removes all packed contents, and unreferences them.]]
         return: bool; [[$true on success, $false otherwise]]
      }
      unpack_all {
         [[Removes all packed contents, without unreferencing them.

           Use with caution.
         ]]
         return: bool; [[$true on success, $false otherwise]]
      }
      unpack {
         [[Removes an existing item from the container, without deleting it.]]
         params {
            subobj: Efl.Gfx.Entity; [[The unpacked object.]]
         }
         return: bool; [[$false if $subobj wasn't a child or can't be removed]]
      }
      pack {
         [[Adds an item to this container.

           Depending on the container this will either fill in the default
           spot, replacing any already existing element or append to the end
           of the container if there is no default part.

           When this container is deleted, it will request deletion of the
           given $subobj. Use @.unpack to remove $subobj from this container
           without deleting it.
         ]]
         params {
            subobj: Efl.Gfx.Entity; [[An object to pack.]]
         }
         return: bool; [[$false if $subobj could not be packed.]]
      }
      @property pack_align {
         [[Alignment of the container within its bounds]]
         set {}
         get {}
         values {
            align_horiz: double; [[Horizontal alignment]]
            align_vert:  double; [[Vertical alignment]]
         }
      }
      @property pack_padding {
         [[Padding between items contained in this object.]]
         set {}
         get {}
         values {
            pad_horiz: double; [[Horizontal padding]]
            pad_vert:  double; [[Vertical padding]]
            scalable:  bool; [[$true if scalable, $false otherwise]]
         }
      }
   }
   events {
      layout,updated: void; [[Sent after the layout was updated.]]
   }
}
