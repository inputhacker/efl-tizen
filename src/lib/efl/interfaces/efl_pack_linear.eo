interface Efl.Pack_Linear extends Efl.Pack
{
   [[API for containers ]]
   eo_prefix: efl_pack;
   methods {
      pack_begin {
         [[Prepend an object at the beginning of this container.

           This is the same as @.pack_at($subobj, 0).

           When this container is deleted, it will request deletion of the
           given $subobj. Use @Efl.Pack.unpack to remove $subobj from this
           container without deleting it.
         ]]
         params {
            @in subobj: Efl.Gfx.Entity; [[Item to pack.]]
         }
         return: bool; [[$false if $subobj could not be packed]]
      }
      pack_end {
         [[Append object at the end of this container.

           This is the same as @.pack_at($subobj, -1).

           When this container is deleted, it will request deletion of the
           given $subobj. Use @Efl.Pack.unpack to remove $subobj from this
           container without deleting it.
         ]]
         params {
            @in subobj: Efl.Gfx.Entity; [[Item to pack at the end.]]
         }
         return: bool; [[$false if $subobj could not be packed]]
      }
      pack_before {
         [[Prepend item before other sub object.

           When this container is deleted, it will request deletion of the
           given $subobj. Use @Efl.Pack.unpack to remove $subobj from this
           container without deleting it.
         ]]
         params {
            @in subobj: Efl.Gfx.Entity; [[Item to pack before $existing.]]
            @in existing: const(Efl.Gfx.Entity); [[Item to refer to.]]
         }
         return: bool; [[$false if $existing could not be found or $subobj
                         could not be packed.]]
      }
      pack_after {
         [[Append item after other sub object.

           When this container is deleted, it will request deletion of the
           given $subobj. Use @Efl.Pack.unpack to remove $subobj from this
           container without deleting it.
         ]]
         params {
            @in subobj: Efl.Gfx.Entity; [[Item to pack after $existing.]]
            @in existing: const(Efl.Gfx.Entity); [[Item to refer to.]]
         }
         return: bool; [[$false if $existing could not be found or $subobj
                         could not be packed.]]
      }
      pack_at {
          [[Inserts $subobj at the specified $index.

            Valid range: -$count to +$count. -1 refers to the last element.
            Out of range indices will trigger an append.

            When this container is deleted, it will request deletion of the
            given $subobj. Use @Efl.Pack.unpack to remove $subobj from this
            container without deleting it.
          ]]
          params {
             @in subobj: Efl.Gfx.Entity; [[Item to pack at given index.]]
             @in index:  int; [[A position.]]
          }
          return: bool; [[$false if $subobj could not be packed.]]
      }
      pack_content_get {
         [[Content at a given index in this container.

           Index -1 refers to the last item. The valid range is -(count - 1) to
           (count - 1).
         ]]
         params {
            index: int; [[Index number]]
         }
         return: Efl.Gfx.Entity; [[The object contained at the given $index.]]
      }
      pack_index_get {
         [[Get the index of a child in this container.]]
         params {
            subobj: const(Efl.Gfx.Entity); [[An object contained in this pack.]]
         }
         return: int(-1); [[-1 in case of failure, or the index of this item.]]
      }
      pack_unpack_at {
         [[Pop out item at specified $index.

           Equivalent to unpack(content_at($index)).
         ]]
         params {
            index: int; [[Index number]]
         }
         return: Efl.Gfx.Entity; [[The child item if it could be removed.]]
      }
   }
}
