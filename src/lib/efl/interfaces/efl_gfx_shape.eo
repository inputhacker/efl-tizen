mixin Efl.Gfx.Shape
{
   legacy_prefix: null;
   properties {
      stroke_scale {
         set {
            /*@
              Sets the stroke scale to be used for stroking the path.
              the scale property will be used along with stroke width property.
              @since 1.14
            */
         }
         get {
            /*@
              Get the stroke scaling factor used for stroking this path.
              @since 1.14
            */
         }
         values {
            double s; /*@ stroke scale value */
         }
      }
      stroke_color {
         set {
            /*@
              Sets the color to be used for stroking the path.
              @since 1.14
            */
         }
         get {
            /*@
              Gets the color used for stroking the path.
              @since 1.14
            */
         }
         values {
            int r; /*@ The red component of the given color. */
            int g; /*@ The green component of the given color. */
            int b; /*@ The blue component of the given color. */
            int a; /*@ The alpha component of the given color. */
         }
      }
      stroke_width {
         set {
            /*@
              Sets the stroke width to be used for stroking the path.
              @since 1.14
            */
         }
         get {
            /*@
              Gets the stroke width to be used for stroking the path.
              @since 1.14
            */
         }
         values {
            double w; /*@ stroke width to be used */
         }
      }
      stroke_location {
         set {
            /*@
              Not Implemented
            */
         }
         get {
            /*@
              Not Implemented
            */
         }
         values {
            double centered; /*@  */
         }
      }
      stroke_dash {
         set {
            /*@
              Not Implemented
            */
         }
         get {
            /*@
              Not Implemented
            */
         }
         values {
            const(Efl_Gfx_Dash) *dash; /*@  */
            uint length; /*@  */
         }
      }
      stroke_cap {
         set {
            /*@
              Sets the cap style to be used for stroking the path.
              The cap will be used for capping the end point of a 
              open subpath.

              @see Efl_Gfx_Cap
              @since 1.14
            */
         }
         get {
            /*@
              Gets the cap style used for stroking path.
              @since 1.14
            */
         }
         values {
            Efl_Gfx_Cap c; /*@ cap style to use , default is EFL_GFX_CAP_BUTT */
         }
      }
      stroke_join {
         set {
            /*@
              Sets the join style to be used for stroking the path.
              The join style will be used for joining the two line segment
              while stroking teh path.

              @see Efl_Gfx_Join
              @since 1.14
            */
         }
         get {
            /*@
              Gets the join style used for stroking path.
              @since 1.14
            */
         }
         values {
            Efl_Gfx_Join j; /*@ join style to use , default is
                              EFL_GFX_JOIN_MITER */
         }
      }
      path {
         set {
            /*@
              Set the list of commands and points to be used to create the
              content of shape.

              @note see efl_gfx_path interface for how to create a command list.
              @see Efl_Gfx_Path_Command
              @since 1.14
            */
         }
         get {
            /*@
             Gets the command and points list
             @since 1.14 
            */
         }
         values {
            const(Efl_Gfx_Path_Command) *op; /*@ command list */
            const(double) *points; /*@ point list */
         }
      }
      path_length {
	 get {
	 }
	 values {
	    uint commands;
	    uint points;
	 }
      }
      current {
         get {
	 }
	 values {
	    double x;
	    double y;
	 }
      }
      current_ctrl {
         get {
	 }
	 values {
	    double x;
	    double y;
	 }
      }
   }
   methods {
      dup {
         params {
            @in Eo *dup_from;
	 }
      }
      reset {
      }
      append_move_to {
         params {
	    @in double x;
	    @in double y;
	 }
      }
      append_line_to {
         params {
	    @in double x;
	    @in double y;
	 }
      }
      append_quadratic_to {
         params {
	    @in double x;
	    @in double y;
	    @in double ctrl_x;
	    @in double ctrl_y;
	 }
      }
      append_squadratic_to {
         params {
	    @in double x;
	    @in double y;
	 }
      }
      append_cubic_to {
         params {
	    @in double x;
	    @in double y;
	    @in double ctrl_x0;
	    @in double ctrl_y0;
	    @in double ctrl_x1;
	    @in double ctrl_y1;
	 }
      }
      append_scubic_to {
         params {
	    @in double x;
	    @in double y;
	    @in double ctrl_x;
	    @in double ctrl_y;
	 }
      }
      append_arc_to {
         params {
	    @in double x;
	    @in double y;
	    @in double rx;
	    @in double ry;
	    @in double angle;
	    @in bool large_arc;
	    @in bool sweep;
	 }
      }
      append_close {
      }
      append_circle {
         params {
	    @in double x;
	    @in double y;
	    @in double radius;
	 }
      }
      append_rect {
         params {
	    @in double x;
	    @in double y;
	    @in double w;
	    @in double h;
	    @in double rx;
	    @in double ry;
	 }
      }
      append_svg_path {
         params {
	    @in const(char)* svg_path_data;
	 }
      }
      interpolate {
         return: bool;
	 params {
	    @in const(Eo)* from;
	    @in const(Eo)* to;
	    @in double pos_map;
	 }
      }
      equal_commands {
         return: bool;
	 params {
	    @in const(Eo)* with;
	 }
      }
   }
   implements {
      @virtual .stroke_scale.get;
      @virtual .stroke_scale.set;
      @virtual .stroke_color.get;
      @virtual .stroke_color.set;
      @virtual .stroke_width.get;
      @virtual .stroke_width.set;
      @virtual .stroke_location.get;
      @virtual .stroke_location.set;
      @virtual .stroke_dash.get;
      @virtual .stroke_dash.set;
      @virtual .stroke_cap.get;
      @virtual .stroke_cap.set;
      @virtual .stroke_join.get;
      @virtual .stroke_join.set;
   }
}
