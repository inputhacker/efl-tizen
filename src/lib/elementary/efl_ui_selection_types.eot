enum Efl.Ui.Selection_Type
{
   [[Selection type]]
   primary, [[Primary text selection (highlighted or selected text)]]
   secondary, [[Used when primary selection is in use]]
   dnd, [[Drag and Drop]]
   clipboard [[Clipboard selection (ctrl+C)]]
}

enum Efl.Ui.Selection_Format
{
   [[Selection format]]
   targets = -1, [[For matching every possible atom]]
   none = 0x0, [[Content is from outside of Elementary]]
   text = 0x01, [[Plain unformatted text: Used for things that don't want rich markup]]
   markup = 0x2, [[Edje textblock markup, including inline images]]
   image = 0x4, [[Images]]
   vcard = 0x08, [[Vcards]]
   html = 0x10 [[Raw HTML-like data (eg. webkit)]]
}

enum Efl.Ui.Selection_Action
{
   [[Defines the kind of action associated with the drop data]]
   unknown, [[Action type is unknown]]
   copy, [[Copy the data]]
   move, [[Move the data]]
   private, [[Private action type]]
   ask, [[Ask the user what to do]]
   list, [[List the data]]
   link, [[Link the data]]
   description [[Describe the data]]
}

struct Efl.Ui.Selection_Data
{
   [[Structure holding the info about selected data]]
   pos: Eina.Position2D; [[Coordinates of the drop (DND operations only)]]
   format: Efl.Ui.Selection_Format; [[Format of the selection]]
   content: Eina.Slice; [[Selection data]]
   action: Efl.Ui.Selection_Action; [[Action to perform with the data]]
   item: Efl.Object; [[Item under the drag position. It is only available for container]]
}

function Efl.Ui.Selection_Data_Ready {
   [[Function pointer for getting selection]]
   params {
      @in obj: Efl.Object; [[Object which requested for the selection]]
      @in seldata: ptr(Efl.Ui.Selection_Data); [[Selection data]]
   }
};

struct Efl.Ui.Selection_Changed
{
   type: Efl.Ui.Selection_Type; [[Selection type]]
   seat: int; [[The seat on which the selection changed, or NULL for "default"]]
   display: void_ptr; [[The display connection object, NULL under X11]]
   exist: bool; [[EINA_TRUE if the selection has an owner]]
}
