class Efl.Ui.Panes extends Efl.Ui.Layout implements Efl.Ui.Direction,
                    Efl.Ui.Clickable
{
   [[Elementary panes class]]
   legacy_prefix: elm_panes;
   event_prefix: elm_panes;
   methods {
      @property split_ratio {
         [[Set the split ratio between panes widget first and second parts.

           By default it's homogeneous, i.e., both sides have the same size.

           If something different is required, it can be set with this function.
           For example, if the first content should be displayed over
           75% of the panes size, $ratio should be passed as 0.75.
           This way, second content will be resized to 25% of panes size.

           If displayed vertically, first content is displayed at top, and
           second content at bottom.

           Note: This ratio will change when user drags the panes bar.]]
           set {
             legacy: null;
           }
           get {
             legacy: null;
           }
         values {
            ratio: double; [[Value between 0.0 and 1.0 representing split ratio between panes first and second parts.]]
         }
      }
      @property fixed {
         [[Set whether the left and right panes can be resized by user interaction.

           By default panes' contents are resizable by user interaction.]]
         set {
         }
         get {
         }
         values {
            fixed: bool; [[Use $true to fix the left and right panes sizes and make
            them not to be resized by user interaction. Use $false to make them
            resizable.]]
         }
      }
   }
   parts {
      first: Efl.Ui.Panes_Part; [[The first half of the panes widget (left or top)]]
      second: Efl.Ui.Panes_Part; [[The second half of the panes widget (right or bottom)]]
   }
   implements {
      Efl.Object.constructor;
      Efl.Ui.Widget.theme_apply;
      Efl.Ui.Direction.direction { get; set; [[Only supports $vertical and $horizontal. Default is $vertical.]] }
      Efl.Part.part_get;
      //TIZEN_ONLY(20180607): Restore legacy focus
      Efl.Ui.Widget.focus_next_manager_is;
      Efl.Ui.Widget.focus_next;
      //
   }
   events {
      press: void; [[Called when panes got pressed]]
      unpress: void; [[Called when panes are no longer pressed]]
   }
}
