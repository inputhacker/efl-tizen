mixin Efl.Ui.Focus.Layer (Efl.Interface, Efl.Ui.Widget, Efl.Gfx.Entity, Efl.Ui.Widget_Focus_Manager) {
   [[This defines the inheriting widget as focus layer

     A focus layer is the uppermost one which received input and handles all focus related events for as long as it exists and is visible. It's NOT possible to escape this layer with focus movement.

     Once the object is hidden or destroyed the focus will go back to the mainwindow, where it was before.
   ]]
   methods {
     @property enable @protected {
        [[Enable property]]
        values {
           v : bool; [[$true to set enable the layer $false to disable it]]
        }
     }
     @property behaviour @protected {
        [[Constructor for setting the behaviour of the layer]]
        values {
           enable_on_visible : bool;  [[$true means layer will set itself once the inheriting widget becomes visible, $false means the layer isn't enabled automatically]]
           cycle : bool; [[If $true the focus will cycle in the layer, if $false]]
        }
     }
   }
   implements {
      Efl.Ui.Widget_Focus_Manager.focus_manager_create;
      Efl.Ui.Widget.focus_state_apply;
      Efl.Gfx.Entity.visible {set;}
      Efl.Ui.Focus.Manager.move;
      Efl.Ui.Focus.Object.focus_manager { get; }
      Efl.Ui.Focus.Object.focus_parent { get; }
      Efl.Object.constructor;
      Efl.Object.destructor;
   }
}
