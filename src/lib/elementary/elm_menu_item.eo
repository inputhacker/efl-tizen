class Elm.Menu.Item(Elm.Widget.Item, Efl.Access.Selection, Efl.Ui.Legacy)
{
   [[Elementary menu item class]]
   legacy_prefix: elm_menu_item;
   eo_prefix: elm_obj_menu_item;
   methods {
      @property icon_name {
           get {
              [[Get the string representation from the icon of a menu item

                Once this icon is set, any previously set icon will be deleted.
                To hide icon set it to "".
              ]]
           }
           set {
              [[Set the icon of a menu item to the standard icon with the
                given name.

                Once this icon is set, any previously set icon will be deleted.
                To hide icon set it to "".
              ]]
           }
           values {
               icon: string; [[The name of icon object.]]
           }
      }
      @property prev {
         get {
            [[Get the item before this one in the widget's list of items.

              See also @.next.
            ]]
         }
         values {
            item: Elm.Widget.Item; [[The item before the object in its parent's
                                list. If there is no previous item or in case
                                of error, $null is returned.]]
         }
      }
      @property next {
         get {
            [[Get the item after this one in the widget's list of items.

              See also @.prev.
            ]]
         }
         values {
            item: Elm.Widget.Item; [[The item after the object in its parent's
                                list. If there is no next item or in case
                                of error, $null is returned.]]
         }
      }
      @property selected {
         [[Indicates whether this item is currently selected.]]
         get {
            [[Get the selected state of this item.]]
         }
         set {
             [[Set the selected state of $item.

               This sets the selected state of the given item $it.
               $true for selected, $false for not selected.

               If a new item is selected the previously selected will
               be unselected. Previously selected item can be retrieved
               with @Elm.Menu.selected_item.get.

               Selected items will be highlighted.
             ]]
         }
         values {
            selected: bool; [[The selection state.]]
         }
      }
      index_get @const {
             [[Get the item index]]
             return: uint; [[Item index]]
        }
     subitems_clear {
             [[Remove all sub-items (children) of the given item

               This removes all items that are children (and their descendants)
               of the given item $it.

               @since 1.8
             ]]
        }
     subitems_get @const {
             [[Returns a list of $item's subitems.]]
             return: const(list<Elm.Widget.Item>); [[A list of $item's subitems]]
        }
     is_separator @const {
             [[Returns whether $item is a separator.]]
             return: bool; [[$true if the item is a separator.]]
        }
     object_get @const {
             [[Get the real Evas(Edje) object created to implement the view of
               a given menu item.

               Warning: Don't manipulate this object!
             ]]
             return: Efl.Canvas.Object; [[The base Edje object containing the
                                     swallowed content associated with the item.]]
        }
   }
   implements {
        Efl.Object.constructor;
        Efl.Object.destructor;
        Efl.Object.parent { get; }
        Elm.Widget.Item.disable;
        Elm.Widget.Item.signal_emit;
        Elm.Widget.Item.part_text { get; set; }
        Elm.Widget.Item.part_content { get; set; }
        Efl.Access.Object.access_children { get; }
        Efl.Access.Object.role { get; }
        Efl.Access.Object.i18n_name { get; }
        Efl.Access.Object.state_set { get; }
        Efl.Access.Selection.selected_children_count { get; }
        Efl.Access.Selection.selected_child { get; }
   }
}
