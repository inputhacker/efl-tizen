class Elm.Notify (Efl.Ui.Widget, Efl.Ui.Focus.Layer, Efl.Content, Efl.Part, Efl.Ui.Legacy)
{
   [[Elementary notification class]]
   legacy_prefix: elm_notify;
   eo_prefix: elm_obj_notify;
   event_prefix: elm_notify;
   methods {
      @property align {
         set {
            [[Set the alignment of the notify object

              Sets the alignment in which the notify will appear in its parent.

              Note: To fill the notify box in the parent area, please pass the
              ELM_NOTIFY_ALIGN_FILL to horizontal and vertical.

              @since 1.8
            ]]
         }
         get {
            [[Get the alignment of the notify object

              @since 1.8
            ]]
         }
         values {
            horizontal: double; [[The horizontal alignment of the notification]]
            vertical: double; [[The vertical alignment of the notification]]
         }
      }
      @property allow_events {
         set {
            [[Sets whether events should be passed to by a click outside
              its area.

              When true if the user clicks outside the window the events will
              be caught by the others widgets, else the events are blocked.

              Note: The default value is true.
            ]]
         }
         get {
            [[Return true if events are allowed below the notify object.]]
         }
         values {
            allow: bool; [[$true if events are allowed, $false otherwise]]
         }
      }
      @property timeout {
         set {
            [[Set the time interval after which the notify window is going to
              be hidden.

              This function sets a timeout and starts the timer controlling
              when the notify is hidden. Since calling evas_object_show() on
              a notify restarts the timer controlling when the notify is
              hidden, setting this before the notify is shown will in effect
              mean starting the timer when the notify is shown.

              Note: Set a value <= 0.0 to disable a running timer.

              Note: If the value > 0.0 and the notify is previously visible,
              the timer will be started with this value, canceling any running
              timer.
            ]]
         }
         get {
            [[Return the timeout value (in seconds)]]
         }
         values {
            timeout: double; [[The timeout in seconds]]
         }
      }
      dismiss {
         [[Dismiss a notify object.
           @since 1.17
         ]]
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Efl.Gfx.Entity.visible { set; }
      Efl.Gfx.Entity.position { set; }
      Efl.Gfx.Entity.size { set; }
      Efl.Ui.Widget.widget_parent { get; set; }
      Efl.Ui.Widget.theme_apply;
      Efl.Ui.Widget.widget_sub_object_del;
      Efl.Content.content { get; set; }
      Efl.Content.content_unset;
      Efl.Part.part_get;

      /* TIZEN_ONLY(170621): support multiscale problem on TM2 */
      Efl.Ui.Widget.on_orientation_update;
      /* END */
      //TIZEN_ONLY(20180607): Restore legacy focus
      Efl.Ui.Widget.focus_direction;
      Efl.Ui.Widget.focus_direction_manager_is;
      Efl.Ui.Widget.focus_next_manager_is;
      Efl.Ui.Widget.focus_next;
      //
   }
   events {
      block,clicked: void; [[Called when block was clicked]]
      timeout: void; [[Called when notify timed out]]
      dismissed: void; [[Called when notify was dismissed]]

      /* TIZEN_ONLY(20160629) : add "show,finished" internal callback */
      show,finished: void; [[Called when notify show animation is finished]]
      /* END */
   }
}
