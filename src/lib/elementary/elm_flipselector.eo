class Elm.Flipselector (Efl.Ui.Layout.Object, Efl.Ui.Range,
                        Efl.Access.Widget.Action,
                        Efl.Ui.Selectable, Efl.Ui.Legacy)
{
   [[Elementary flipselector class]]
   legacy_prefix: elm_flipselector;
   eo_prefix: elm_obj_flipselector;
   event_prefix: elm_flipselector;
   methods {
      @property items {
         get {
            [[Get the internal list of items in a given flip selector widget.

              This list is not to be modified in any way and must not be
              freed. Use the list members with functions like
              \@ref elm_object_item_text_set,
              \@ref elm_object_item_text_get,
              \@ref elm_object_item_del,
              \@ref elm_flipselector_item_selected_get,
              \@ref elm_flipselector_item_selected_set.

              Warning: This list is only valid until $obj object's internal
              items list is changed. It should be fetched again with another
              call to this function when changes happen.
            ]]
            return: const(list<Elm.Widget.Item>); [[List of items]]
         }
      }
      @property first_item {
         get {
            [[Get the first item in the given flip selector widget's list of
              items.

              See also @.item_append,
              @.last_item.get.
            ]]
            return: Elm.Widget.Item; [[The first item or $null, if it has no items (and on
            errors).]]

         }
      }
      @property last_item {
         get {
            [[Get the last item in the given flip selector widget's list of
              items.

              See also @.item_prepend,
              @.first_item.get.
            ]]
            return: Elm.Widget.Item; [[The last item or $null, if it has no items (and on
            errors).]]

         }
      }
      @property selected_item {
         get {
            [[Get the currently selected item in a flip selector widget.]]
            return: Elm.Widget.Item; [[The selected item or $null, if the widget has no items
              (and on errors).]]

         }
      }
      @property first_interval {
         set {
            [[Set the interval on time updates for a user mouse button hold
              on a flip selector widget.

              This interval value is decreased while the user holds the
              mouse pointer either flipping up or flipping down a given flip
              selector.

              This helps the user to get to a given item distant from the
              current one easier/faster, as it will start to flip quicker and
              quicker on mouse button holds.

              The calculation for the next flip interval value, starting from
              the one set with this call, is the previous interval divided by
              1.05, so it decreases a little bit.

              The default starting interval value for automatic flips is
              0.85 seconds.

              See also @.first_interval.get.
            ]]
         }
         get {
            [[Get the interval on time updates for an user mouse button hold
              on a flip selector widget.

              See also @.first_interval.set for more details.
            ]]
         }
         values {
            interval: double; [[The (first) interval value in seconds.]]
         }
      }
      item_prepend {
         [[Prepend a (text) item to a flip selector widget

           The widget's list of labels to show will be prepended with the
           given value. If the user wishes so, a callback function pointer
           can be passed, which will get called when this same item is
           selected.

           Note: The current selection won't be modified by prepending
           an element to the list.

           Note: The maximum length of the text label is going to be
           determined by the widget's theme. Strings larger than
           that value are going to be truncated.
         ]]
         return: Elm.Widget.Item; [[New widget item]]
         params {
            @in label: string; [[The (text) label of the new item.]]
            @in func: Evas_Smart_Cb @optional; [[Convenience callback function to take place when
            item is selected.]]
            @in data: void_ptr @optional; [[Data passed to $func, above.]]
         }
      }
      flip_next {
         [[Programmatically select the next item of a flip selector widget

           Note: The selection will be animated. Also, if it reaches the
           end of its list of member items, it will continue with the first
           one onwards.
         ]]
      }
      item_append {
         [[Append a (text) item to a flip selector widget

           The widget's list of labels to show will be appended with the
           given value. If the user wishes so, a callback function pointer
           can be passed, which will get called when this same item is
           selected.

           Note: The current selection won't be modified by appending an
           element to the list.

           Note: The maximum length of the text label is going to be
           determined by the widget's theme. Strings larger than
           that value are going to be truncated.
         ]]
         return: Elm.Widget.Item; [[New widget item]]
         params {
            @in label: string; [[The (text) label of the new item.]]
            @in func: Evas_Smart_Cb @optional; [[Convenience callback function to take place when
            item is selected.]]
            @in data: const(void_ptr) @optional; [[Data passed to $func, above.]]
         }
      }
      flip_prev {
         [[Programmatically select the previous item of a flip selector
           widget

           Note: The selection will be animated. Also, if it reaches the
           beginning of its list of member items, it will continue with the
           last one backwards.
         ]]
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Efl.Ui.Widget.theme_apply;
      Efl.Ui.Widget.widget_event;
      //TIZEN_ONLY(20160822): When atspi mode is dynamically switched on/off,
      //register/unregister access objects accordingly.
      // TIZEN_ONLY(20170516): connect to at-spi dbus based on org.a11y.Status.IsEnabled property
      Efl.Ui.Widget.screen_reader;
      //
      //
      Efl.Ui.Range.range_min_max { get; set; }
      Efl.Ui.Range.range_step { get; set; }
      Efl.Ui.Range.range_value { get; set; }
      Efl.Access.Widget.Action.elm_actions { get; }
      //TIZEN_ONLY(20150716) : fix accessible_at_point getter
      Efl.Access.Component.accessible_at_point_get;
      //
   }
   events {
      underflowed; [[Called when flipselector is underflowed]]
      overflowed; [[Called when flipselector is overflowed]]
   }
}
