class Elm.Scroller extends Efl.Ui.Layout implements Elm.Interface_Scrollable,
                    Efl.Access.Widget.Action,
                    Efl.Ui.Scrollable, Efl.Content, Efl.Ui.Legacy
{
   [[Elementary scroller class]]
   legacy_prefix: elm_scroller;
   eo_prefix: elm_obj_scroller;
   event_prefix: elm_scroller;
   methods {
      @property custom_widget_base_theme {
         set {
            [[Set custom theme elements for the scroller]]
         }
         values {
            klass: string; [[Klass name]]
            group: string; [[Group name]]
         }
      }
      page_scroll_limit_set @const {
         [[Set the maximum of the movable page at a flicking.

           The value of maximum movable page should be more than 1.

           @since 1.8
         ]]
         params {
            @in page_limit_h: int; [[The maximum of the movable horizontal page]]
            @in page_limit_v: int; [[The maximum of the movable vertical page]]
         }
      }
      page_scroll_limit_get @const {
         [[Get the maximum of the movable page at a flicking.

           @since 1.8
         ]]
         params {
            @in page_limit_h: ptr(int); [[The maximum of the movable horizontal page]]
            @in page_limit_v: ptr(int); [[The maximum of the movable vertical page]]
         }
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Efl.Gfx.Entity.position { set; }
      Efl.Gfx.Entity.size { set; }
      Efl.Canvas.Group.group_member_add;
      Efl.Content.content { get; set; }
      Efl.Content.content_unset;
      Efl.Ui.Widget.theme_apply;
      Efl.Ui.Widget.on_access_activate;
      Efl.Ui.Widget.widget_sub_object_del;
      Efl.Ui.Widget.widget_event;
      Elm.Interface_Scrollable.page_size { set; }
      Elm.Interface_Scrollable.policy { set; }
      Elm.Interface_Scrollable.single_direction { get; set; }
      Efl.Access.Widget.Action.elm_actions { get; }
      Efl.Part.part_get;
      Efl.Ui.Widget.focus_state_apply;
      //TIZEN_ONLY(20180607): Restore legacy focus
      Efl.Ui.Widget.focus_next_manager_is;
      Efl.Ui.Widget.focus_direction_manager_is;
      Efl.Ui.Widget.focus_next;
      Efl.Ui.Widget.focus_direction;
      //
   }
   events {
      scroll,page,changed: void; [[Called when scroll page changed]]
      hbar,unpress: void; [[Called when horizontal bar is no longer pressed]]
      hbar,press: void; [[Called when horizontal bar is pressed]]
      hbar,drag: void; [[Called when horizontal bar is dragged]]
      vbar,unpress: void; [[Called when vertical bar is no longer pressed]]
      vbar,press: void; [[Called when vertical bar is pressed]]
      vbar,drag: void; [[Called when vertical bar is dragged]]
      scroll,left: void; [[Called when scrolling to left]]
      scroll,right: void; [[Called when scrolling to right]]
      scroll,up: void;  [[Called scrolled upwards]]
      scroll,down: void; [[Called when scrolled downwards]]
      edge,left: void; [[Called when hitting the left edge]]
      edge,right: void; [[Called when hitting the right edge]]
      edge,top: void; [[Called when hitting the top edge]]
      edge,bottom: void; [[Called when hitting the bottom edge]]
   }
}
