import efl_selection_types;

mixin Efl.Selection {
   [[Efl Selection class]]
   data: null;
   methods {
      selection_set {
         [[Set the selection data to the object]]
         params {
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in format: Efl.Selection.Format; [[Selection Format]]
            @in data: Eina.Slice;
            @in seat: uint;[[Specified seat for multiple seats case.]]
         }
         return: ptr(Eina.Future); [[Future for tracking when the selection is lost]]
      }
      selection_get {
         [[Get the data from the object that has selection]]
         params {
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in format: Efl.Selection.Format; [[Selection Format]]
            @in data_func: Efl.Selection.Data_Ready; [[Data ready function pointer]]
            @in seat: uint;[[Specified seat for multiple seats case.]]
         }
      }
      selection_clear {
         [[Clear the selection data from the object]]
         params {
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in seat: uint; [[Specified seat for multiple seats case.]]
         }
      }
      has_owner {
         [[Determine whether the selection data has owner]]
         params {
            @in type: Efl.Selection.Type; [[Selection type]]
            @in seat: uint; [[Specified seat for multiple seats case.]]
         }
         return: bool; [[EINA_TRUE if there is object owns selection, otherwise EINA_FALSE]]
      }
   }
   events {
      selection,changed; [[Called when display server's selection has changed]]
   }
}
