import edje_types;

// FIXME: This EO doc needs a direct link to the "edcref" doc

class @beta Efl.Canvas.Layout extends Efl.Canvas.Group implements Efl.File, Efl.Container, Efl.Part,
                         Efl.Observer, Efl.Layout.Calc,
                         Efl.Layout.Signal, Efl.Layout.Group,
                         Efl.Player, Efl.Gfx.Color_Class, Efl.Gfx.Text_Class,
                         Efl.Gfx.Size_Class
{
   [[Edje object class]]
   legacy_prefix: edje_object;
   event_prefix: efl_layout;
   data: Edje;
   methods {
      @property animation {
         [[Whether this object is animating or not.

           This property indicates whether animations are stopped or not.
           Animations here refer to transitions between states.

           If animations are disabled, transitions between states (as
           defined in EDC) are then instantaneous. This is conceptually similar
           to setting the @Efl.Player.play_speed to an infinitely high
           value.
         ]]
         get {
            [[Get the current state of animation, $true by default.]]
         }
         set {
            [[Start or stop animating this object.]]
         }
         values {
            on: bool; [[The animation state, $true by default.]]
         }
      }

      access_part_iterate @beta {
         [[Iterates over all accessibility-enabled part names.]]
         legacy: null;
         return: iterator<string> @owned; [[Part name iterator]]
      }
      @property seat {
         get {
            [[Returns the seat device given its Edje's name.

              Edje references seats by a name that differs from Evas.
              Edje naming follows a incrementional convention: first
              registered name is "seat1", second is "seat2", differently
              from Evas.

              @since 1.19]]

            return: Efl.Input.Device; [[The seat device or $null if not found.]]
         }
         keys {
            name: stringshare; [[The name's character string.]]
         }
      }
      @property seat_name {
         get {
            [[Gets the name given to a set by Edje.

              Edje references seats by a name that differs from Evas.
              Edje naming follows a incrementional convention: first
              registered name is "seat1", second is "seat2", differently
              from Evas.

              @since 1.19]]

            return: stringshare; [[The name's character string or $null if not found.]]
         }
         keys {
            device: Efl.Input.Device; [[The seat device]]
         }
      }
      @property layout_load_error {
          get {
              [[Gets the (last) file loading error for a given object.]]
          }
          values {
             error: Efl.Gfx.Image_Load_Error(Efl.Gfx.Image_Load_Error.none); [[The load error code.]]
          }
      }

      /***********************************************************************************
       * TIZEN_ONLY_FEATURE: API for handling text properties of Edje                    *
       ***********************************************************************************/
      @property part_text_min_policy {
         set {
            [[Sets the object text min calculation policy.

              Do not use this API without understanding whats going on.
              It is made for internal usage.

              \@if MOBILE \@since_tizen 3.0
              \@elseif WEARABLE \@since_tizen 3.0
              \@endif
              \@internal
            ]]
            return: bool; [[$true on success, or $false on error]]
         }
         get {
            [[Gets the object text min calculation policy.

              Do not use this API without understanding whats going on.
              It is made for internal usage.

              \@if MOBILE \@since_tizen 3.0
              \@elseif WEARABLE \@since_tizen 3.0
              \@endif
              \@internal
            ]]
            return: bool; [[$true on success, or $false on error]]
         }
         keys {
            part: string; [[The part name]]
            state_name: string; [[The state name]]
         }
         values {
            min_x: bool; [[The min width policy]]
            min_y: bool; [[The min height policy]]
         }
      }
      @property part_text_valign {
         set {
            [[Sets the valign for text.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
            return: bool; [[$true, on success or $false, on error]]
         }
         get {
            [[Gets the valign for text.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            valign: double; [[The valign 0.0~1.0. -1.0 for respect EDC's align value.]]
         }
      }
      /*******
       * END *
       *******/
      /***********************************************************************************
       * TIZEN_ONLY_FEATURE: ellipsize.marquee, ellipsize.fade for TEXTBLOCK, TEXT part. *
       ***********************************************************************************/
      @property part_text_marquee_duration {
         set {
            [[Sets the duration for text's marquee.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
            return: bool; [[$true, on success or $false, on error]]
         }
         get {
            [[Gets the duration for text's marquee.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            duration: double; [[The duration. 0.0 for respect EDC's duration value.]]
         }
      }
      @property part_text_marquee_speed {
         set {
            [[Sets the speed for text's marquee.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
            return: bool; [[$true, on success or $false, on error]]
         }
         get {
            [[Gets the speed for text's marquee.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            speed: double; [[The speed. 0.0 for respect EDC's speed value.]]
         }
      }
      @property part_text_marquee_always {
         set {
            [[Sets the always mode for text's marquee.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
            return: bool; [[$true, on success or $false, on error]]
         }
         get {
            [[Gets the always mode for text's marquee.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            always: bool; [[The always mode]]
         }
      }
      /*******
       * END *
       *******/
      /***********************************************************************************
       * TIZEN_ONLY_FEATURE: apply Tizen's color_class features.                         *
       ***********************************************************************************/
      color_class_parent_set {
         [[Sets the parent object for color class.

           \@if MOBILE \@since_tizen 3.0
           \@elseif WEARABLE \@since_tizen 3.0
           \@endif
           \@internal
         ]]
         params {
            @in parent: Efl.Object @nonull; [[The parent object for color class]]
         }
      }
      color_class_parent_unset {
         [[Unsets the parent object for color class.

           \@if MOBILE \@since_tizen 3.0
           \@elseif WEARABLE \@since_tizen 3.0
           \@endif
           \@internal
         ]]
      }
      /*******
       * END *
       *******/
      /***********************************************************************************
       * TIZEN_ONLY_FEATURE: API for handling common properties of Edje                  *
       ***********************************************************************************/
      @property part_valign {
         set {
            [[Sets the valign for a common description.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
            return: bool; [[$true, on success or $false, on error]]
         }
         get {
            [[Gets the valign for a common description.

              Do not use this API without understanding whats going on.
              It is made for internal usage.
              \@internal
            ]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            valign: double; [[The valign 0.0~1.0. -1.0 for respect EDC's align value.]]
         }
      }
      /*******
       * END *
       *******/
      /**********************************************************************************
       * TIZEN_ONLY(20171128): add additional cursor function for improving performance *
       **********************************************************************************/
      part_text_cursor_coord_get {
         [[Get a position of the given cursor

           \@internal
         ]]
         params {
            @in part: string; [[The part name]]
            @in cur: Edje.Cursor; [[cursor type]]
            @out x: int; [[w]]
            @out y: int; [[h]]
         }
      }
      part_text_cursor_size_get {
         [[Get a size of the given cursor

           \@internal
         ]]
         params {
            @in part: string; [[The part name]]
            @in cur: Edje.Cursor; [[cursor type]]
            @out w: int; [[w]]
            @out h: int; [[h]]
         }
      }
      /*******
       * END *
       *******/
      /*********************************************************************
       * TIZEN_ONLY(20161110): keep cursor position on mouse down and move *
       *********************************************************************/
      part_text_cursor_on_mouse_geometry_get @const {
         [[Returns the cursor geometry of the part relative to the edje
           object. The cursor geometry is kept in mouse down and move.

           \@internal
           \@if MOBILE \@since_tizen 3.0
           \@elseif WEARABLE \@since_tizen 3.0
           \@endif
         ]]
         params {
            @in part: string; [[The part name]]
            @out x: int;      [[Cursor X position]]
            @out y: int;      [[Cursor Y position]]
            @out w: int;      [[Cursor width]]
            @out h: int;      [[Cursor height]]
         }
      }
      /*******
       * END *
       *******/
   }
   events {
      part,invalid @beta: string; [[Emitted when trying to use an invalid part.
                                    The value passed is the part name.]]
   }
   implements {
      Efl.Gfx.Entity.visible { set; }
      Efl.Gfx.Entity.position { set; }
      Efl.Gfx.Entity.size { set; }
      Efl.Object.constructor;
      Efl.Object.invalidate;
      Efl.Object.debug_name_override;
      Efl.Canvas.Object.no_render { set; }
      Efl.Canvas.Object.paragraph_direction { set; }
      Efl.Gfx.Color_Class.color_class { get; set; }
      Efl.Gfx.Color_Class.color_class_description { get; }
      Efl.Gfx.Color_Class.color_class_del;
      Efl.Gfx.Color_Class.color_class_clear;
      Efl.Gfx.Text_Class.text_class { get; set; }
      Efl.Gfx.Text_Class.text_class_del;
      Efl.Gfx.Size_Class.size_class { get; set; }
      Efl.Gfx.Size_Class.size_class_del;
      Efl.Canvas.Group.group_calculate;
      Efl.Layout.Calc.calc_auto_update_hints { get; set; }
      Efl.Layout.Calc.calc_size_min;
      Efl.Layout.Calc.calc_parts_extends;
      Efl.Layout.Calc.calc_freeze;
      Efl.Layout.Calc.calc_thaw;
      Efl.Layout.Calc.calc_force;
      Efl.Layout.Group.group_size_min { get; }
      Efl.Layout.Group.group_size_max { get; }
      Efl.Layout.Group.group_data { get; }
      Efl.Layout.Group.part_exist { get; }
      Efl.Layout.Signal.message_send;
      Efl.Layout.Signal.signal_callback_add;
      Efl.Layout.Signal.signal_callback_del;
      Efl.Layout.Signal.signal_emit;
      Efl.Layout.Signal.signal_process;
      Efl.Ui.I18n.mirrored { set; get; }
      Efl.Ui.I18n.language { set; get; }
      Efl.Gfx.Entity.scale { set; get; }
      Efl.File.load;
      Efl.Container.content_remove;
      Efl.Container.content_iterate;
      Efl.Container.content_count;
      Efl.Part.part_get; [[Returns @Efl.Canvas.Layout_Part]]
      Efl.Observer.update;
      Efl.Player.playable { get; }
      Efl.Player.play { get; set; }
      Efl.Player.play_speed { get; set; }
   }
}
