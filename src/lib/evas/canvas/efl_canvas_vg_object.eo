enum Efl.Canvas.Vg.Fill_Mode
{
   [[Enumeration that defines how viewbox will be filled int the vg canvs's viewport.
     default Fill_Mode is $none]]
   none,         [[Don't scale the viewbox. Placed it inside viewport taking
                  align property into account]]
   stretch,     [[Scale the viewbox so that it matches
                  the canvas viewport.
                  Aaspect ratio might be changed.]]
   meet,        [[Scale the viewbox
                  so that it fits inside canvas viewport
                  while maintaining the aspect ratio.
                  At least one of the dimensions of the viewbox
                  should be equal to the corresponding dimension
                  of the viewport.]]
   slice       [[Scale the viewbox
                  so that it covers the entire canvas viewport
                  while maintaining the aspect ratio.
                  At least one of the dimensions of the viewbox
                  should be equal to the corresponding
                  dimension of the viewport.]]
}

class @beta Efl.Canvas.Vg.Object extends Efl.Canvas.Object implements Efl.File, Efl.File_Save,
                           //TIZEN_ONLY(20180831): evas json: new feature for lottie - #4
                            Efl.Gfx.Frame_Controller
                           //
{
   [[Efl vector graphics class]]
   methods {
      @property fill_mode {
         [[Control how the viewbox is mapped to the vg canvas's viewport.]]
         values {
            fill_mode: Efl.Canvas.Vg.Fill_Mode; [[Fill mode type]]
         }
      }
      @property viewbox {
         get {
            [[Get the current viewbox from the  evas_object_vg]]
         }
         set {
            [[Sets the viewbox for the evas vg canvas.
              viewbox if set should be mapped to the canvas geometry when rendering the vg tree.]]
         }
         values {
            viewbox: Eina.Rect; [[viewbox for the vg canvas]]
         }
      }
      @property viewbox_align {
         [[Control how the viewbox is positioned inside the viewport.]]
         values {
            align_x: double(0.0); [[Alignment in the horizontal axis (0 <= align_x <= 1).]]
            align_y: double(0.0); [[Alignment in the vertical axis (0 <= align_y <= 1).]]
         }
      }
      @property root_node {
         get {
            [[Get the root node of the evas_object_vg.
              @since 1.14]]
         }
         set {
            [[Set the root node of the evas_object_vg.

              Note: To manually create the shape object and show in the Vg
                    object canvas you must create the hierarchy and set as root node.

              It takes the ownership of the root node. ]]
         }
         values {
            root: Efl.Canvas.Vg.Node; [[Root node of the VG canvas.]]
         }
      }
      @property default_size {
         get {
            [[Get the default vector size that specified from vector resource.
              @since 1.22]]
         }
         values {
            size: Eina.Size2D;
         }
      }
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.finalize;
      Efl.Object.destructor;
      Efl.File.load;
      Efl.File.unload;
      Efl.File.file { set; }
      Efl.File_Save.save;
      Efl.Gfx.Frame_Controller.animated { get; }
      Efl.Gfx.Frame_Controller.frame { get; set; }
      Efl.Gfx.Frame_Controller.frame_count { get; }
      Efl.Gfx.Frame_Controller.loop_type { get; }
      Efl.Gfx.Frame_Controller.loop_count { get; }
      Efl.Gfx.Frame_Controller.frame_duration { get; }
   }
}
